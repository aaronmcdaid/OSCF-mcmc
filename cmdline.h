/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.2
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "Stochastic Block Models"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "Stochastic Block Models"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int git_version_flag;	/**< @brief detailed version description (default=off).  */
  const char *git_version_help; /**< @brief detailed version description help description.  */
  int assume_N_nodes_arg;	/**< @brief Pre-create N nodes (0 to N-1), which may be left with zero degree (default='0').  */
  char * assume_N_nodes_orig;	/**< @brief Pre-create N nodes (0 to N-1), which may be left with zero degree original value given at command line.  */
  const char *assume_N_nodes_help; /**< @brief Pre-create N nodes (0 to N-1), which may be left with zero degree help description.  */
  int stringIDs_flag;	/**< @brief string IDs in the input (default=off).  */
  const char *stringIDs_help; /**< @brief string IDs in the input help description.  */
  int seed_arg;	/**< @brief seed to drand48() and gsl_rng_set (default='0').  */
  char * seed_orig;	/**< @brief seed to drand48() and gsl_rng_set original value given at command line.  */
  const char *seed_help; /**< @brief seed to drand48() and gsl_rng_set help description.  */
  char * GT_arg;	/**< @brief The ground truth, one line per community..  */
  char * GT_orig;	/**< @brief The ground truth, one line per community. original value given at command line.  */
  const char *GT_help; /**< @brief The ground truth, one line per community. help description.  */
  int K_arg;	/**< @brief Number of clusters, K (default='-1').  */
  char * K_orig;	/**< @brief Number of clusters, K original value given at command line.  */
  const char *K_help; /**< @brief Number of clusters, K help description.  */
  int iterations_arg;	/**< @brief How many iterations (default='10000').  */
  char * iterations_orig;	/**< @brief How many iterations original value given at command line.  */
  const char *iterations_help; /**< @brief How many iterations help description.  */
  int metroK_algo_arg;	/**< @brief Use the simple Metropolis move on K (default='1').  */
  char * metroK_algo_orig;	/**< @brief Use the simple Metropolis move on K original value given at command line.  */
  const char *metroK_algo_help; /**< @brief Use the simple Metropolis move on K help description.  */
  int metro1Comm1Edge_algo_arg;	/**< @brief Use the simple Metropolis move on K (default='1').  */
  char * metro1Comm1Edge_algo_orig;	/**< @brief Use the simple Metropolis move on K original value given at command line.  */
  const char *metro1Comm1Edge_algo_help; /**< @brief Use the simple Metropolis move on K help description.  */
  int NearbyGibbs_algo_arg;	/**< @brief Gibbs updated on Nearby comms (default='1').  */
  char * NearbyGibbs_algo_orig;	/**< @brief Gibbs updated on Nearby comms original value given at command line.  */
  const char *NearbyGibbs_algo_help; /**< @brief Gibbs updated on Nearby comms help description.  */
  int Simplest1Node_algo_arg;	/**< @brief  (default='0').  */
  char * Simplest1Node_algo_orig;	/**< @brief  original value given at command line.  */
  const char *Simplest1Node_algo_help; /**< @brief  help description.  */
  int AnySM_algo_arg;	/**< @brief  (default='1').  */
  char * AnySM_algo_orig;	/**< @brief  original value given at command line.  */
  const char *AnySM_algo_help; /**< @brief  help description.  */
  int SharedSM_algo_arg;	/**< @brief  (default='1').  */
  char * SharedSM_algo_orig;	/**< @brief  original value given at command line.  */
  const char *SharedSM_algo_help; /**< @brief  help description.  */
  int M3_algo_arg;	/**< @brief  (default='1').  */
  char * M3_algo_orig;	/**< @brief  original value given at command line.  */
  const char *M3_algo_help; /**< @brief  help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int git_version_given ;	/**< @brief Whether git-version was given.  */
  unsigned int assume_N_nodes_given ;	/**< @brief Whether assume_N_nodes was given.  */
  unsigned int stringIDs_given ;	/**< @brief Whether stringIDs was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int GT_given ;	/**< @brief Whether GT was given.  */
  unsigned int K_given ;	/**< @brief Whether K was given.  */
  unsigned int iterations_given ;	/**< @brief Whether iterations was given.  */
  unsigned int metroK_algo_given ;	/**< @brief Whether metroK.algo was given.  */
  unsigned int metro1Comm1Edge_algo_given ;	/**< @brief Whether metro1Comm1Edge.algo was given.  */
  unsigned int NearbyGibbs_algo_given ;	/**< @brief Whether NearbyGibbs.algo was given.  */
  unsigned int Simplest1Node_algo_given ;	/**< @brief Whether Simplest1Node.algo was given.  */
  unsigned int AnySM_algo_given ;	/**< @brief Whether AnySM.algo was given.  */
  unsigned int SharedSM_algo_given ;	/**< @brief Whether SharedSM.algo was given.  */
  unsigned int M3_algo_given ;	/**< @brief Whether M3.algo was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
